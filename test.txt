TESTS MINISHELL

echo > | <  OK

echo bonjour | OK

echo bonjour |               OK

echo bonjour |       | cat infile OK

wc -l > outfile OK

echo < hello OK

echo hello world | wc -l > outfile OK

echo hello world < | wc -l > outfile OK

echo hello world < infile | wc -l > outfile OK

echo hello world < | wc -l > outfile | cat << hello OK

echo hello     world < |   wc -l > outfile      |  cat << hello OK

echo hello     world < |   wc -l > outfile      |  cat << hello     | OK

echo hello world << outfile | wc -l > outfile | cat < | grep >> 123456 << 123 > 1234 | hello world OK

echo hello world >>dgh>fhhh|cat >echo OK

echo hello world >>dgh<""fhhh|cat >echo OK

echo hello world >>dgh<"hello world" fhhh|cat >echo OK

echo hello world >>dgh<"hello world"fhhh|cat >echo OK

hello  " > hello world " hello > world OK

hello " >> coucou << ca va " | cat " < gfgf > ergs " OK

hello ' >> coucou << ca va ' | cat ' < gfgf > ergs ' OK

hello > " > hello world "" hello > world OK

hello > ' > hello world '' hello > world OK

echo hello >"out"file OK

echo >>		hello		"fefe"abc"ok"abc <	 here "test" < b 123"ddds" yuio

echo < abc"hello world" OK

echo > abc" 'a'ab"ab << ab""''ab c			<		'a'			>> ' 'ab""

echo > bla bla > hello world < dggdgd << doc rgasgsdfs > afgfgsd >> app > ga << heredoc << here >> hello >> salut | cd dfhdfgds | grep >> azerty

cat infile_1 | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat

echo "'''"""'''""hel"'o""


message = ""
message = test.
buffer = test.
message = test .
buffer = NULL

env -i
OLDPWD


Problemes :

1) echo $? doit etre remis en place (apres ca, refaire le test "return value of a process")

2) CTRL+D/CTRL+C dans les pipe finaux et heredoc
	fork dans build_heredoc_str ?
		signal(SIGINT, SIG_DFL)

3) echo hello |v| , puis rev. Comportement bizarre apres le message d'erreur (porbablement li√© au signaux [voir 2)])

4) ft_calloc_strs dans minisplit a re-checker :
		if (ft_strchr("\"\'", s[i]) && quotes == 0)
				quotes = 1;
		else if ????

5) checker skip_space et voir pour la mettre dans les utils

6 ) variable globale pour le retour de status

7) On ne ferme jamais les fichiers !!!

8) Si la creation du pipe pour les heredoc foire, a quelle valeur on met le statut ?